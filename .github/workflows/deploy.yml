name: Deploy

on:
  push:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment
        default: 'dev'
        options:
          - dev
          - qa
          - prod
      chosen-tag:
        type: string
        description: tag to deploy
jobs:
  print-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Print env argument
        run: echo User selected environment ${{ inputs.environment }}           
  deploy-dev:
    permissions: write-all
    if: ${{ inputs.environment == 'dev' || inputs.environment == null }}
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: deploy
        run: echo 'Deploying to dev, token ${{ secrets.JIRA_API_KEY }}'
      
      - uses: actions/checkout@v1
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment-dev
        with:
          token: '${{ github.token }}'
      - name: print deployment id
        run: |
          echo deployment id: ${{ steps.deployment-dev.outputs.deployment_id }}
      - uses: chrnorm/deployment-status@v2
        name: Update deployment status (success)
        if: success()
        with:
          token: '${{ github.token }}'
          deployment-id: ${{ steps.deployment-dev.outputs.deployment_id }}
          state: 'sucess'          
  deploy-qa:
    if: ${{ inputs.environment == 'qa' }}
    runs-on: ubuntu-latest
    environment: qa
    steps:
      - name: deploy
        run: echo 'Deploying to qa, token ${{ secrets.JIRA_API_KEY }}'
      
      - uses: actions/checkout@v1
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment-qa
        with:
          token: '${{ github.token }}'
      - name: print deployment id
        run: |
          echo deployment id: ${{ steps.deployment-qa.outputs.deployment_id }}
      - uses: chrnorm/deployment-status@v2
        name: Update deployment status (success)
        if: success()
        with:
          token: '${{ github.token }}'
          deployment-id: ${{ steps.deployment-qa.outputs.deployment_id }}
          state: 'success'
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
        run: |
          gh release create ${{ chosen-env.tag }} \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${{ env.tag }}" \
              --generate-notes          
  deploy-prod:
    if: ${{ inputs.environment == 'prod' }}
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: deploy
        run: echo 'Deploying to prod, token ${{ secrets.JIRA_API_KEY }}'
      
      - uses: actions/checkout@v1
      - uses: chrnorm/deployment-action@v2
        name: Create GitHub deployment
        id: deployment-prod
        with:
          token: '${{ github.token }}'
      - name: print deployment id
        run: |
          echo deployment id: ${{ steps.deployment-prod.outputs.deployment_id }}
      - uses: chrnorm/deployment-status@v2
        name: Update deployment status (success)
        if: success()
        with:
          token: '${{ github.token }}'
          deployment-id: ${{ steps.deployment-prod.outputs.deployment_id }}
          state: 'success'        
